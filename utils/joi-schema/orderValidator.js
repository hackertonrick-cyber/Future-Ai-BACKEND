// validators/OrderValidator.js
import Joi from 'joi'

export const createOrderSchema = Joi.object({
  "user": Joi.string().pattern(/^[0-9a-fA-F]{24}$/).required(),
  "userSnapshot": Joi.object({ "userId": Joi.string().pattern(/^[0-9a-fA-F]{24}$/).optional(), "userName": Joi.string().optional(), "email": Joi.string().optional(), "accountTier": Joi.string().optional() }),
  "adminTags": Joi.array().items(Joi.string()).valid[
        "vip",
        "manual-review",
        "suspicious",
        "flagged",
        "referral",
        "test",
        "high-value",
        "perk-diamond",
        "perk-platinum",
        "perk-gold",
        "perk-silver",
        "perk-bronze",
      ].optional(),
  "currency": Joi.string().valid["USD", "USDT", "ETH", "BTC", "BNB", "ADA", "XRP", "LPG"].required(),
  "quantity": Joi.number().min([1, "Quantity must be at least 1"]).required(),
  "meta": Joi.any().optional(),
  "costBeforeTax": Joi.number().min([0, "Cost before tax cannot be negative"]).required(),
  "taxAmount": Joi.number().min([0, "Tax amount cannot be negative"]).required(),
  "totalPrice": Joi.number().min([0, "Total price cannot be negative"]).required(),
  "isPaid": Joi.boolean().required(),
  "paidAt": Joi.date(),
  "sessionId": Joi.string().required(),
  "paymentIntentId": Joi.string().optional(),
  "receiptUrl": Joi.string().required(),
  "paymentStatus": Joi.string().valid["paid", "unpaid", "refunded", "failed", "pending"].optional(),
  "isRefunded": Joi.boolean().optional(),
  "refundReason": Joi.string().optional(),
  "refundAt": Joi.date(),
  "notes": Joi.string().optional(),
  "status": Joi.string().valid["active", "cancelled", "expired", "complete"].optional(),
  "ipAddress": Joi.string(),
  "userAgent": Joi.string(),
  "location": Joi.string()
})

export const updateOrderSchema = Joi.object({
  "user": Joi.string().pattern(/^[0-9a-fA-F]{24}$/).optional(),
  "userSnapshot": Joi.object({ "userId": Joi.string().pattern(/^[0-9a-fA-F]{24}$/).optional(), "userName": Joi.string().optional(), "email": Joi.string().optional(), "accountTier": Joi.string().optional() }),
  "adminTags": Joi.array().items(Joi.string()).valid[
        "vip",
        "manual-review",
        "suspicious",
        "flagged",
        "referral",
        "test",
        "high-value",
        "perk-diamond",
        "perk-platinum",
        "perk-gold",
        "perk-silver",
        "perk-bronze",
      ].optional(),
  "currency": Joi.string().valid["USD", "USDT", "ETH", "BTC", "BNB", "ADA", "XRP", "LPG"].optional(),
  "quantity": Joi.number().min([1, "Quantity must be at least 1"]).optional(),
  "meta": Joi.any().optional(),
  "costBeforeTax": Joi.number().min([0, "Cost before tax cannot be negative"]).optional(),
  "taxAmount": Joi.number().min([0, "Tax amount cannot be negative"]).optional(),
  "totalPrice": Joi.number().min([0, "Total price cannot be negative"]).optional(),
  "isPaid": Joi.boolean().optional(),
  "paidAt": Joi.date(),
  "sessionId": Joi.string().optional(),
  "paymentIntentId": Joi.string().optional(),
  "receiptUrl": Joi.string().optional(),
  "paymentStatus": Joi.string().valid["paid", "unpaid", "refunded", "failed", "pending"].optional(),
  "isRefunded": Joi.boolean().optional(),
  "refundReason": Joi.string().optional(),
  "refundAt": Joi.date(),
  "notes": Joi.string().optional(),
  "status": Joi.string().valid["active", "cancelled", "expired", "complete"].optional(),
  "ipAddress": Joi.string(),
  "userAgent": Joi.string(),
  "location": Joi.string()
})
